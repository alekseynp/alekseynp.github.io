author: Aleksey Nozdryn-Plotnicki
date: 2018-01-20 20:00:00+00:00
slug: adversarial-images-diagnostics
title: Generating Targeted Universal Adversarial Images from Discriminative Networks: Diagnostic Potential
category: Adversarial Images
---

<style>
	.MathJax {
		font-size: 4em;
	}
</style>

# Introduction

Analysing, visualizing, diagnosing, and interpreting neural networks is famously difficult. In my recent work in adversarial images, images that have been modified by an adversary in order to fool an image classifier (discriminator), I have discovered a new tool for this task. Similar things have been tried before, but I don't believe with this success.

For a given DNN (deep neural network) classifier and a target class, it is possible to create a single change that when added to any image, it fools that network with high probability. It is possible to create this **only** with the trained neural network and the data upon which it was trained. In practice it is not necessary to have the training data. Any approximately similar data should do.

Here are a few such changes for Google's Inception v3 trained on imagenet:

<div class="row">
<div id=33 class="col-md-4"><center>
<img src="/images/incv3_univ/33.png" alt="loggerhead, loggerhead turtle, Caretta caretta" /><br />
<a href="#33">loggerhead, loggerhead turtle, Caretta caretta</a></center></div>
<div id=34 class="col-md-4"><center>
<img src="/images/incv3_univ/34.png" alt="leatherback turtle, leatherback, leathery turtle, Dermochelys coriacea" /><br />
<a href="#34">leatherback turtle, leatherback, leathery turtle, Dermochelys coriacea</a></center></div>
<div id=35 class="col-md-4"><center>
<img src="/images/incv3_univ/35.png" alt="mud turtle" /><br />
<a href="#35">mud turtle</a></center></div>
</div><br />
<div class="row">
<div id=36 class="col-md-4"><center>
<img src="/images/incv3_univ/36.png" alt="terrapin" /><br />
<a href="#36">terrapin</a></center></div>
<div id=37 class="col-md-4"><center>
<img src="/images/incv3_univ/37.png" alt="box turtle, box tortoise" /><br />
<a href="#37">box turtle, box tortoise</a></center></div>
</div>

These images are vibrant, clear, interpretable, and obviously highly related to the target class. We can study these and see what the neural network has learned about each turtle class.

This is not just constrained to turtles, of course, but can be done with any imagenet class. I have created [1,000 such images, one for every class](pages/inception-v3-targeted-universal-attacks-page-6.html).

Large cats:
<div class="row">
<div id=288 class="col-md-4"><center>
<img src="/images/incv3_univ/288.png" alt=leopard, Panthera pardus /><br />
<a href="#288">leopard, Panthera pardus</a></center></div>
<div id=289 class="col-md-4"><center>
<img src="/images/incv3_univ/289.png" alt=snow leopard, ounce, Panthera uncia /><br />
<a href="#289">snow leopard, ounce, Panthera uncia</a></center></div>
<div id=290 class="col-md-4"><center>
<img src="/images/incv3_univ/290.png" alt=jaguar, panther, Panthera onca, Felis onca /><br />
</div><br />
<div class="row">
<a href="#290">jaguar, panther, Panthera onca, Felis onca</a></center></div>
<div id=291 class="col-md-4"><center>
<img src="/images/incv3_univ/291.png" alt=lion, king of beasts, Panthera leo /><br />
<a href="#291">lion, king of beasts, Panthera leo</a></center></div>
<div id=292 class="col-md-4"><center>
<img src="/images/incv3_univ/292.png" alt=tiger, Panthera tigris /><br />
<a href="#292">tiger, Panthera tigris</a></center></div>
<div id=293 class="col-md-4"><center>
<img src="/images/incv3_univ/293.png" alt=cheetah, chetah, Acinonyx jubatus /><br />
<a href="#293">cheetah, chetah, Acinonyx jubatus</a></center></div>
</div>
<br />

# Diagnosis

Studying the images, it is possible to identify problems with the network, or perhaps with the dataset that it was trained on.

<br />
<div class="row">
<div id=664 class="col-md-4"><center>
<img src="/images/incv3_univ/664.png" alt="monitor" /><br />
<a href="#664">monitor</a></center></div>
</div>
<br />

Is that Chinese on the monitor? No it's not actual Chinese, but it is strange proto-Chinese that has been generated by the process. The network has learned that Chinese written over the image is a very strong indicator that it is a monitor. If you look at the imagenet training data, you will see that a large portion of the monitor images have been sourced from Alibaba and they have Chinese overlayed on the image.

<br />
<div class="row">
<div id=670 class="col-md-4"><center>
<img src="/images/incv3_univ/670.png" alt=motor scooter, scooter /><br />
<a href="#670">motor scooter, scooter</a></center></div>
<div id=774 class="col-md-4"><center>
<img src="/images/incv3_univ/774.png" alt=sandal /><br />
<a href="#774">sandal</a></center></div>
<div id=793 class="col-md-4"><center>
<img src="/images/incv3_univ/793.png" alt=shower cap /><br />
<a href="#793">shower cap</a></center></div>
</div>
<br />

Monitor is not the only object with this problem, though it is perhaps the most striking.

<br />
<div class="row">
<div id=978 class="col-md-4"><center>
<img src="/images/incv3_univ/978.png" alt=seashore, coast, seacoast, sea-coast /><br />
<a href="#978">seashore, coast, seacoast, sea-coast</a></center></div>
</div>
<br />

Tourism is big business, and so a lot of the seashore images have English written on them, hence the funny proto-English above.

<br />
<div class="row">
<div id=96 class="col-md-4"><center>
<img src="/images/incv3_univ/96.png" alt="toucan" /><br />
<a href="#96">toucan</a></center></div>
</div>
<br />

There is a distinct cage or net visible for the toucan. From a quick glance at the training data, about half of toucan images include some cage or net. This is not something that we would want our network to learn if we were training it to identify toucans in the wild!

<br />
<div class="row">
<div id=78 class="col-md-4"><center>
<img src="/images/incv3_univ/78.png" alt="tick" /><br />
<a href="#78">tick</a></center></div>
</div>
<br />

Clearly the network has learned a lot about **where** you find ticks, not just what they look like. Here is a tuck buried in some long hair.

<br />
# Creating Targeted Universal Images: The Math

Creating a targeted universal image looks a lot like the routine for training a neural network, but instead of training the network to make the correct output, we train an image to make the network output the target instead of what is correct.

We use the crossy entropy loss, as was used to train the network.

The goal is to maximize the expected output for the target, $p_{target}$, when the change $\delta$ is made to a randomly selected image $x$.

$$
\max_{\delta}E_x[p_{target}]
$$

We constrain the $\delta$ to be to be no more than some $\epsilon$ for each pixel value. This is the infinity norm constraint.

$$
\lvert\lvert\delta\lvert\lvert_\infty \leq \epsilon
$$

<br />
### Change of Variable

We perform a change of variable in order to do unconstrained optimization. For each pixel value $i$ we define a $\delta_i$ function that maps a new variable $w_i \in [-\infty,\infty]$ to $\delta_i$ values that obey the constraint:

$$
\delta_i(w_i) = \epsilon\cdot tanh(w_i)
$$

Since $tanh(w) \in (-1,1)$ 

then $\delta_i(w_i) \in (-\epsilon,\epsilon)$

We can them perform unconstrained stochastic gradient descent with optimizers like Adam.

<br />
### Optimization

Given a random $x$ from the dataset, we compute $p_{target} = f_{target}(x + \delta(w))$ where $f$ is the target neural network (i.e. inception v3).

Then we compute the gradient $\frac{\partial p_{target}}{\partial w}$, pass it to the Adam optimizer, and take a step to maximize $p_{target}$.

<br />
### Improving Results with Augmentations

Deep Neural Networks are very easily fooled. Unless we do something, our optimization routine is likely to converge on images that exploit this weakness, rather than utilize the true properties of the target class. You can see some of this in the images that I have created, though I have taken steps to mitigate it. For example, the center of the big cat images above are largely trained to exploit DNN weaknesses rather than look like big cats.

We insert differentiable image augmentations between the changed image and the target network. $\delta$ is calculated and added to the image. The result is clipped to be a valid image $x + \delta \in [0,255]$. The image is randomly flipped horizontally, blurred with a Gaussian kernel, and randomly cropped. Finally the image is bilinearly resized back up to `(299,299)` as expected by inception v3.

The augmetations can be thought of as a function $A(X)$ and we can consider our optimization to be seeking to maximize:
$$
\max_{w}E_x[f_{target}(A(x + \delta(w)))]
$$

# Conclusion

When I began working with adversarial images I felt that therin lay some essential truth behind the functioning of neural networks. What I demonstrate here is a technique that offers diagnostic power in assessing a DNN CNN image classifier.